(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.afinity = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

function EventEmitter() {
  this._events = this._events || {};
  this._maxListeners = this._maxListeners || undefined;
}
module.exports = EventEmitter;

// Backwards-compat with node 0.10.x
EventEmitter.EventEmitter = EventEmitter;

EventEmitter.prototype._events = undefined;
EventEmitter.prototype._maxListeners = undefined;

// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
EventEmitter.defaultMaxListeners = 10;

// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
EventEmitter.prototype.setMaxListeners = function(n) {
  if (!isNumber(n) || n < 0 || isNaN(n))
    throw TypeError('n must be a positive number');
  this._maxListeners = n;
  return this;
};

EventEmitter.prototype.emit = function(type) {
  var er, handler, len, args, i, listeners;

  if (!this._events)
    this._events = {};

  // If there is no 'error' event listener then throw.
  if (type === 'error') {
    if (!this._events.error ||
        (isObject(this._events.error) && !this._events.error.length)) {
      er = arguments[1];
      if (er instanceof Error) {
        throw er; // Unhandled 'error' event
      }
      throw TypeError('Uncaught, unspecified "error" event.');
    }
  }

  handler = this._events[type];

  if (isUndefined(handler))
    return false;

  if (isFunction(handler)) {
    switch (arguments.length) {
      // fast cases
      case 1:
        handler.call(this);
        break;
      case 2:
        handler.call(this, arguments[1]);
        break;
      case 3:
        handler.call(this, arguments[1], arguments[2]);
        break;
      // slower
      default:
        len = arguments.length;
        args = new Array(len - 1);
        for (i = 1; i < len; i++)
          args[i - 1] = arguments[i];
        handler.apply(this, args);
    }
  } else if (isObject(handler)) {
    len = arguments.length;
    args = new Array(len - 1);
    for (i = 1; i < len; i++)
      args[i - 1] = arguments[i];

    listeners = handler.slice();
    len = listeners.length;
    for (i = 0; i < len; i++)
      listeners[i].apply(this, args);
  }

  return true;
};

EventEmitter.prototype.addListener = function(type, listener) {
  var m;

  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  if (!this._events)
    this._events = {};

  // To avoid recursion in the case that type === "newListener"! Before
  // adding it to the listeners, first emit "newListener".
  if (this._events.newListener)
    this.emit('newListener', type,
              isFunction(listener.listener) ?
              listener.listener : listener);

  if (!this._events[type])
    // Optimize the case of one listener. Don't need the extra array object.
    this._events[type] = listener;
  else if (isObject(this._events[type]))
    // If we've already got an array, just append.
    this._events[type].push(listener);
  else
    // Adding the second element, need to change to array.
    this._events[type] = [this._events[type], listener];

  // Check for listener leak
  if (isObject(this._events[type]) && !this._events[type].warned) {
    var m;
    if (!isUndefined(this._maxListeners)) {
      m = this._maxListeners;
    } else {
      m = EventEmitter.defaultMaxListeners;
    }

    if (m && m > 0 && this._events[type].length > m) {
      this._events[type].warned = true;
      console.error('(node) warning: possible EventEmitter memory ' +
                    'leak detected. %d listeners added. ' +
                    'Use emitter.setMaxListeners() to increase limit.',
                    this._events[type].length);
      if (typeof console.trace === 'function') {
        // not supported in IE 10
        console.trace();
      }
    }
  }

  return this;
};

EventEmitter.prototype.on = EventEmitter.prototype.addListener;

EventEmitter.prototype.once = function(type, listener) {
  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  var fired = false;

  function g() {
    this.removeListener(type, g);

    if (!fired) {
      fired = true;
      listener.apply(this, arguments);
    }
  }

  g.listener = listener;
  this.on(type, g);

  return this;
};

// emits a 'removeListener' event iff the listener was removed
EventEmitter.prototype.removeListener = function(type, listener) {
  var list, position, length, i;

  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  if (!this._events || !this._events[type])
    return this;

  list = this._events[type];
  length = list.length;
  position = -1;

  if (list === listener ||
      (isFunction(list.listener) && list.listener === listener)) {
    delete this._events[type];
    if (this._events.removeListener)
      this.emit('removeListener', type, listener);

  } else if (isObject(list)) {
    for (i = length; i-- > 0;) {
      if (list[i] === listener ||
          (list[i].listener && list[i].listener === listener)) {
        position = i;
        break;
      }
    }

    if (position < 0)
      return this;

    if (list.length === 1) {
      list.length = 0;
      delete this._events[type];
    } else {
      list.splice(position, 1);
    }

    if (this._events.removeListener)
      this.emit('removeListener', type, listener);
  }

  return this;
};

EventEmitter.prototype.removeAllListeners = function(type) {
  var key, listeners;

  if (!this._events)
    return this;

  // not listening for removeListener, no need to emit
  if (!this._events.removeListener) {
    if (arguments.length === 0)
      this._events = {};
    else if (this._events[type])
      delete this._events[type];
    return this;
  }

  // emit removeListener for all listeners on all events
  if (arguments.length === 0) {
    for (key in this._events) {
      if (key === 'removeListener') continue;
      this.removeAllListeners(key);
    }
    this.removeAllListeners('removeListener');
    this._events = {};
    return this;
  }

  listeners = this._events[type];

  if (isFunction(listeners)) {
    this.removeListener(type, listeners);
  } else {
    // LIFO order
    while (listeners.length)
      this.removeListener(type, listeners[listeners.length - 1]);
  }
  delete this._events[type];

  return this;
};

EventEmitter.prototype.listeners = function(type) {
  var ret;
  if (!this._events || !this._events[type])
    ret = [];
  else if (isFunction(this._events[type]))
    ret = [this._events[type]];
  else
    ret = this._events[type].slice();
  return ret;
};

EventEmitter.listenerCount = function(emitter, type) {
  var ret;
  if (!emitter._events || !emitter._events[type])
    ret = 0;
  else if (isFunction(emitter._events[type]))
    ret = 1;
  else
    ret = emitter._events[type].length;
  return ret;
};

function isFunction(arg) {
  return typeof arg === 'function';
}

function isNumber(arg) {
  return typeof arg === 'number';
}

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}

function isUndefined(arg) {
  return arg === void 0;
}

},{}],2:[function(require,module,exports){
(function (global){

/*
 *
 * Create base object
 *
 */
var $, idCounter;

require('../base/shim');

$ = (typeof window !== "undefined" ? window.jQuery : typeof global !== "undefined" ? global.jQuery : null);

idCounter = 0;

module.exports = function(prototype) {
  var object;
  object = Object.create(prototype);
  object.model = Object.create(prototype.model);
  object.view = Object.create(prototype.view);
  object.controller = Object.create(prototype.controller);
  object._container = Object.create(prototype._container);
  object._events = Object.create(prototype._events);
  object.form = Object.create(prototype.form);
  object._id = idCounter++;
  object._parent = null;
  object._events.data = {};
  object._container.children = {};
  if (prototype.view.$root instanceof jQuery && prototype._template) {
    object.view.$root = $(prototype.view.$root.outerHTML());
  } else {
    object.view.$root = $();
  }
  object._data = {};
  if (prototype._data) {
    $.extend(true, object._data, prototype._data);
  }
  object.model._data = {};
  if (prototype.model._data) {
    $.extend(true, object.model._data, prototype.model._data);
  }
  return object;
};


}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"../base/shim":7}],3:[function(require,module,exports){
var EventEmitter, Eventify, makeEventObj;

EventEmitter = require('events').EventEmitter;

module.exports = function(obj) {
  var ev, key, method;
  obj = obj || {};
  ev = new Eventify;
  for (key in ev) {
    method = ev[key];
    obj[key] = method;
  }
  return obj;
};

Eventify = (function() {
  function Eventify() {
    this.hub = new EventEmitter;
  }

  Eventify.prototype.on = function(eventName, fn) {
    var event, handler, ref;
    ref = makeEventObj(eventName, fn);
    for (event in ref) {
      handler = ref[event];
      this.hub.on(event, handler);
    }
    return this;
  };

  Eventify.prototype.once = function(eventName, fn) {
    var event, handler, ref;
    ref = makeEventObj(eventName, fn);
    for (event in ref) {
      handler = ref[event];
      this.hub.once(event, handler);
    }
    return this;
  };

  Eventify.prototype.emit = function(eventName, data) {
    var eachData, event, ref;
    ref = makeEventObj(eventName, data);
    for (event in ref) {
      eachData = ref[event];
      this.hub.emit(event, eachData);
    }
    return this;
  };

  Eventify.prototype.trigger = function(eventName, data) {
    return this.emit(eventName, data);
  };

  return Eventify;

})();

makeEventObj = function(eventName, data) {
  var allEvents;
  allEvents = {};
  if (typeof eventName === 'string') {
    allEvents[eventName] = data;
  } else {
    allEvents = eventName;
  }
  return allEvents;
};


},{"events":1}],4:[function(require,module,exports){
(function (global){

/*
 *
 * Launch sequence: Bindings, initializations, etc
 *
 */
var $, util;

$ = (typeof window !== "undefined" ? window.jQuery : typeof global !== "undefined" ? global.jQuery : null);

util = require('../util');

module.exports = function(object) {
  var bindEvent, eventStr, events, handler;
  object.model._initData = $.extend({}, object.model._data);
  util.proxyAll(object, object);
  object.view.render();
  bindEvent = function(ev, handler) {
    if (typeof handler === 'function') {
      object.bind(ev, handler);
    }
  };
  for (eventStr in object.controller) {
    events = eventStr.split(',');
    handler = object.controller[eventStr];
    $.each(events, function(i, ev) {
      ev = $.trim(ev);
      bindEvent(ev, handler);
    });
  }
  object.trigger('create');
  return object;
};


}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"../util":22}],5:[function(require,module,exports){
(function (global){

/*
 *
 * Extend base object with MVC from args
 *
 */
var $, bindFormView, prepArgs, util;

$ = (typeof window !== "undefined" ? window.jQuery : typeof global !== "undefined" ? global.jQuery : null);

util = require('../util');

require('../util/jquery.util');

module.exports = function(object, args) {
  var $root, arg, prop, viewTag;
  args = prepArgs(args);
  arg = args[0];
  for (prop in arg) {
    switch (prop) {
      case 'model':
        $.extend(object.model._data, arg.model);
        break;
      case 'view':
        if (typeof arg.view === 'object') {
          $.extend(object.view, arg.view);
          continue;
        }
        if (arg.view[0] !== '#') {
          object.view.format = arg.view;
          continue;
        }
        $root = $(arg.view);
        viewTag = $root.prop('tagName');
        if (typeof viewTag === 'undefined') {
          throw new Error('afinity: view template not found at ' + arg.view);
        }
        viewTag = viewTag.toLowerCase();
        if (viewTag === 'script') {
          object.view.format = $root.html();
        } else {
          if (viewTag === 'form') {
            bindFormView($root, object);
          }
          object.view.format = $root.outerHTML();
          object.view.$root = $root;
          object._template = true;
        }
        break;
      case 'events':
      case 'controller':
        $.extend(object.controller, arg[prop]);
        util.extendController(object);
        break;
      default:
        object[prop] = arg[prop];
    }
  }
  return object;
};

prepArgs = function(args) {
  var argObj;
  if (typeof args[0] === 'string') {
    argObj = {};
    argObj.view = args[0];
    if (args.length > 1 && typeof args[1] === 'object') {
      argObj.events = args[1];
    }
    args = [argObj];
  }
  return args;
};

bindFormView = function($root, object) {
  var required, viewObj;
  viewObj = {};
  required = {};
  $root.find('input, select, textarea').each(function() {
    var $el, bind, name, req, tag, type;
    $el = $(this);
    bind = $el.attr('data-bind');
    name = $el.attr('name');
    tag = $el.prop('tagName').toLowerCase();
    type = $el.attr('type') || '';
    req = $el.attr('required');
    if (tag === 'textarea') {
      type = 'textarea';
    }
    if ($.isEmpty(bind) && !$.isEmpty(name)) {
      if (type === 'checkbox') {
        viewObj[name] = $el.attr('checked') === 'checked';
      } else if (type === 'radio') {
        if ($el.attr('checked')) {
          viewObj[name] = $el.val();
        } else {

        }
      } else {
        viewObj[name] = $el.val();
      }
      $el.attr('data-bind', name);
    }
    if (typeof req !== 'undefined') {
      if (type === 'email' || name === 'email') {
        required[name] = 'email';
      } else {
        required[name] = true;
      }
    }
  });
  if (!$.isEmpty(viewObj)) {
    $.extend(object.model._data, viewObj);
  }
  if (!$.isEmpty(required)) {
    object.required = $.extend(object.required || {}, required);
  }
  return object;
};


}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"../util":22,"../util/jquery.util":23}],6:[function(require,module,exports){
(function (global){

/*
 *
 * Root afinity methods
 *
 * isAfinity
 * body
 * create, clone, use
 * eventify
 * html, css, escaped
 *
 */
var $, eventify, util;

$ = (typeof window !== "undefined" ? window.jQuery : typeof global !== "undefined" ? global.jQuery : null);

util = require('../util');

eventify = require('./eventify');

module.exports = function(afinity) {
  var registeredModules;
  afinity.isAfinity = function(obj) {
    if (typeof obj !== 'object') {
      return false;
    }
    return util.isAfinity(obj);
  };
  afinity.body = afinity({
    _body: true,
    view: {
      $: function(selector) {
        if (selector) {
          return $(selector, 'body');
        } else {
          return $('body');
        }
      }
    },
    controller: {
      _create: function() {}
    }
  });

  /*
   *
   * create, clone, use
   *
   * Simple module system to register a prototype and create instances
   *
   */
  registeredModules = {};
  afinity.create = function(name, obj) {
    var ref;
    if (typeof name === 'string' && ((ref = name[0]) === '<' || ref === '#')) {
      return afinity(name, obj);
    }
    if (typeof name === 'object') {
      if (name.name != null) {
        return afinity.create(name.name, name);
      } else {
        return afinity(name, obj);
      }
    }
    if (typeof obj === 'object') {
      if (util.isAfinity(obj)) {
        registeredModules[name] = obj;
      } else {
        registeredModules[name] = afinity(obj);
      }
      return registeredModules[name];
    }
  };
  afinity.clone = function(name, obj) {
    if (util.isAfinity(name)) {
      return afinity(name, obj);
    } else if (registeredModules[name] != null) {
      return afinity(registeredModules[name], obj);
    } else {
      throw new Error('afinity.clone: module ' + name + ' not found');
    }
  };
  afinity.use = function(name) {
    if (registeredModules[name] != null) {
      return registeredModules[name];
    } else {
      throw new Error('afinity.use: module ' + name + ' not found');
    }
  };
  afinity.eventify = eventify;
  afinity.eventify(afinity);
  return afinity;
};


}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"../util":22,"./eventify":3}],7:[function(require,module,exports){
(function (global){

/*---------------------------------------------
 *
 * Shim for: Object.create and Object.getPrototypeOf
 *
 * forEach
 *
 */
var $;

$ = (typeof window !== "undefined" ? window.jQuery : typeof global !== "undefined" ? global.jQuery : null);

if (!Object.create || Object.create.toString().search(/native code/i) < 0) {
  Object.create = function(obj) {
    var Aux;
    Aux = function() {};
    $.extend(Aux.prototype, obj);
    return new Aux;
  };
}

if (!Object.getPrototypeOf || Object.getPrototypeOf.toString().search(/native code/i) < 0) {
  if (typeof 'test'.__proto__ === 'object') {
    Object.getPrototypeOf = function(object) {
      return object.__proto__;
    };
  } else {
    Object.getPrototypeOf = function(object) {
      return object.constructor.prototype;
    };
  }
}


}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],8:[function(require,module,exports){

/*
 *
 * afinity - version 0.0.3
 *
 */
var slice = [].slice;

(function(window) {
  var AfinityFactory, afinity, defaultPrototype, util;
  AfinityFactory = {
    create: require('./base/create'),
    load: require('./base/load'),
    launch: require('./base/launch'),
    addMethods: require('./base/methods')
  };
  defaultPrototype = require('./prototype');
  util = require('./util');
  afinity = function() {
    var args, object, prototype;
    args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
    prototype = defaultPrototype;
    if (util.isAfinity(args[0])) {
      prototype = args[0];
      args.shift();
    }
    object = AfinityFactory.create(prototype);
    if (args.length > 0) {
      AfinityFactory.load(object, args);
    }
    return AfinityFactory.launch(object);
  };
  AfinityFactory.addMethods(afinity);
  afinity.fn = defaultPrototype;
  if (typeof define === 'function' && define.amd) {
    define([], function() {
      return afinity;
    });
  } else if (typeof exports === 'object') {
    module.exports = afinity;
  } else {
    window.afinity = afinity;
  }
})(window);


},{"./base/create":2,"./base/launch":4,"./base/load":5,"./base/methods":6,"./prototype":20,"./util":22}],9:[function(require,module,exports){
(function (global){

/*---------------------------------------------
 *
 * Controller
 *
 * Default controllers, i.e. event handlers. Event handlers that start
 * with '_' are of internal use only, and take precedence over any other
 * handler without that prefix. See: trigger()
 *
 */
var $;

$ = (typeof window !== "undefined" ? window.jQuery : typeof global !== "undefined" ? global.jQuery : null);

module.exports = {
  _create: function() {
    this.view.stylize();
    this.view.bindings();
    this.view.sync();
    if (this.init != null) {
      this.init();
    }
  },
  _destroy: function() {
    if (this.view.style) {
      $('head #afinity_' + this._id, window.document).remove();
    }
    this._container.empty();
    this.view.$().remove();
  },
  _append: function(obj, selector) {
    this.view.$(selector).append(obj.view.$());
  },
  _prepend: function(obj, selector) {
    this.view.$(selector).prepend(obj.view.$());
  },
  _before: function(obj, selector) {
    this.view.$(selector).before(obj.view.$());
  },
  _after: function(obj, selector) {
    this.view.$(selector).after(obj.view.$());
  },
  _remove: function(id) {},
  _change: function() {}
};


}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],10:[function(require,module,exports){
(function (global){

/*---------------------------------------------
 *
 * Get
 *
 */
var $;

$ = (typeof window !== "undefined" ? window.jQuery : typeof global !== "undefined" ? global.jQuery : null);

module.exports = function(arg) {
  var i, paths, value;
  if (!arg) {
    return this.model._data;
  }
  if (typeof arg === 'string') {
    paths = arg.split('.');
    value = this.model._data[paths[0]];
    if ($.isPlainObject(value)) {
      i = 1;
      while (i < paths.length) {
        if ($.isPlainObject(value) && value[paths[i]]) {
          value = value[paths[i]];
        } else {
          value = value[paths.splice(i).join('.')];
        }
        i++;
      }
    } else {
      value = this.model._data[arg];
    }
    return value;
  }
  throw new Error('afinity: unknown argument for get');
};


}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],11:[function(require,module,exports){
(function (global){

/*
 *
 * Set: set model attributes and trigger change events
 *
 * TODO: Break it down into small functions
 * TODO: Optimize performance by removing extraneous operations
 *
 */
var $;

$ = (typeof window !== "undefined" ? window.jQuery : typeof global !== "undefined" ? global.jQuery : null);

module.exports = function(arg, params, third) {
  var _clone, attr, current_node, i, index, interal, internal, j, key, last_property, len, modified, next_node, path, previous, prop;
  modified = [];
  previous = {};
  if (typeof arg === 'string') {
    attr = arg;
    arg = {};
    if (typeof params === 'object') {
      arg[attr] = $.extend({}, params);
    } else {
      arg[attr] = params;
    }
    params = third || {};
  }
  if (typeof arg === !'object') {
    throw new Error('afinity.js: unknown argument type in model.set()');
  }
  if (params && params.reset) {
    _clone = $.extend({}, this.model._data);
    this.model._data = $.extend({}, arg);
  } else {
    _clone = $.extend({}, this.model._data);
    for (prop in arg) {
      if (prop.indexOf('.') < 0) {
        break;
      }
      path = prop.split('.');
      current_node = this.model._data[path[0]] || {};
      i = 1;
      while (i < path.length - 1) {
        next_node = current_node[path[i]];
        if ($.isPlainObject(next_node)) {
          current_node = next_node;
        } else {
          current_node[path[i]] = {};
          current_node = current_node[path[i]];
        }
        i++;
      }
      last_property = path[path.length - 1];
      if ($.isPlainObject(arg[key]) && $.isPlainObject(current_node[last_property])) {
        $.extend(current_node[last_property], arg[prop]);
      } else {
        current_node[last_property] = arg[prop];
      }
    }
    $.extend(this.model._data, arg);
  }
  for (key in arg) {
    if (this.model._data[key] !== _clone[key]) {
      modified.push(key);
      previous[key] = _clone[key];
    }
    delete _clone[key];
  }
  for (key in _clone) {
    if (this.model._data[key] !== _clone[key]) {
      modified.push(key);
      previous[key] = _clone[key];
    }
  }
  if (params && params.silent) {
    return this;
  }
  this.trigger('change', [modified, previous]);
  if (params && params.direct) {
    internal = false;
  } else {
    interal = true;
  }
  for (index = j = 0, len = modified.length; j < len; index = ++j) {
    key = modified[index];
    this.trigger('change:' + key, previous[key], internal);
  }
  return this;
};


}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],12:[function(require,module,exports){
(function (global){

/*---------------------------------------------
 *
 * Validate model properties based on object.required
 *
 */
var $, $util;

$ = (typeof window !== "undefined" ? window.jQuery : typeof global !== "undefined" ? global.jQuery : null);

$util = require('../util/jquery.util');

module.exports = {
  invalid: function() {
    var invalid, key;
    invalid = [];
    for (key in this.required) {
      if (!this.model.isValidKey(key)) {
        invalid.push(key);
      }
    }
    return invalid;
  },
  isValid: function(key) {
    if (typeof key === 'undefined') {
      return this.model.invalid().length === 0;
    } else {
      return this.model.isValidKey(key);
    }
  },
  isValidKey: function(key) {
    var requireType, val;
    if (typeof this.required[key] === 'undefined') {
      return true;
    }
    val = this.model.get(key);
    requireType = this.required[key];
    if (requireType === true) {
      return !$.isEmpty(val);
    } else if (requireType === 'email') {
      return $.isEmail(val);
    } else {

    }
    return true;
  }
};


}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"../util/jquery.util":23}],13:[function(require,module,exports){
(function (global){

/*---------------------------------------------
 *
 * Model API
 *
 * get
 * set
 * reset
 * size
 * each
 *
 * invalid
 * isValid
 * isValidKey
 *
 */
var $, model, modelValidate, util;

$ = (typeof window !== "undefined" ? window.jQuery : typeof global !== "undefined" ? global.jQuery : null);

util = require('../util');

modelValidate = require('./model-validate');

model = {
  get: require('./model-get'),
  set: require('./model-set'),
  reset: function(obj) {
    if (!obj) {
      obj = this.model._initData;
    }
    this.model.set(obj, {
      reset: true
    });
    return this;
  },
  size: function() {
    return util.size(this.model._data);
  },
  each: function(fn) {
    $.each(this.model._data, $.proxy(fn, this));
    return this;
  }
};

module.exports = $.extend(model, modelValidate);


}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"../util":22,"./model-get":10,"./model-set":11,"./model-validate":12}],14:[function(require,module,exports){
(function (global){

/*
 *
 * View bindings
 *
 *  Apply DOM <-> Model bindings, from elements with 'data-bind' attributes
 *
 * TODO: Replace self with => and @
 *
 */
var $, _parseBindStr;

$ = (typeof window !== "undefined" ? window.jQuery : typeof global !== "undefined" ? global.jQuery : null);


/*
 *
 * Parse data-bind string
 *
 * Syntax:'[attribute][=] variable[, [attribute][=] variable ]...'
 *
 * All pairs in the list are assumed to be attributes
 * If the variable is not an attribute, it must occur by itself
 *
 * Returns { key:'model key', attr: [ {attr : 'attribute', attrVar : 'variable' }... ] }
 *
 */

_parseBindStr = function(str) {
  var i, keyAssigned, matched, obj, pairs, regex;
  obj = {
    key: null,
    attr: []
  };
  pairs = str.split(',');
  regex = /([a-zA-Z0-9_\-\.]+)(?:[\s=]+([a-zA-Z0-9_\-]+))?/;
  keyAssigned = false;
  matched = void 0;
  if (pairs.length > 0) {
    i = 0;
    while (i < pairs.length) {
      matched = pairs[i].match(regex);
      if (matched) {
        if (typeof matched[2] === 'undefined' || matched[2] === '') {
          if (keyAssigned) {
            throw new Error('You may specify only one key (' + keyAssigned + ' has already been specified in data-bind=' + str + ')');
          } else {
            keyAssigned = matched[1];
            obj.key = matched[1];
          }
        } else {
          obj.attr.push({
            attr: matched[1],
            attrVar: matched[2]
          });
        }
      }
      i++;
    }
  }
  return obj;
};

module.exports = function() {
  var $childNodes, $rootNode, createAttributePairClosure, self;
  self = this;
  $rootNode = this.view.$().filter('[data-bind]');
  $childNodes = this.view.$('[data-bind]');
  createAttributePairClosure = function(bindData, node, i) {
    var attrPair;
    attrPair = bindData.attr[i];
    return function() {
      if (attrPair.attr === 'html') {
        node.html(self.model.get(attrPair.attrVar));
      } else {
        node.attr(attrPair.attr, self.model.get(attrPair.attrVar));
      }
    };
  };
  $rootNode.add($childNodes).each(function() {
    var $node, bindAttributesOneWay, bindData, required;
    $node = $(this);
    bindData = _parseBindStr($node.data('bind') || '');
    required = $node.data('required');
    bindAttributesOneWay = function() {
      var i;
      if (bindData.attr) {
        i = 0;
        while (i < bindData.attr.length) {
          self.bind('_change:' + bindData.attr[i].attrVar, createAttributePairClosure(bindData, $node, i));
          i++;
        }
      }
    };
    if (bindData.key) {

      /*---------------------------------------------
       *
       * Input types
       *
       */
      if ($node.is('input:checkbox')) {
        self.bind('_change:' + bindData.key, function() {
          return $node.prop('checked', self.model.get(bindData.key));
        });
        $node.change(function() {
          return self.model.set(bindData.key, $node.prop('checked'), {
            direct: true
          });
        });
      } else if ($node.is('select')) {
        self.bind('_change:' + bindData.key, function() {
          return $node.val(self.model.get(bindData.key));
        });
        $node.change(function() {
          return self.model.set(bindData.key, $node.val(), {
            direct: true
          });
        });
      } else if ($node.is('input:radio')) {
        self.bind('_change:' + bindData.key, function() {
          return self.view.$root.find('input[name="' + $node.attr('name') + '"]').filter('[value="' + self.model.get(bindData.key) + '"]').prop('checked', true);
        });
        $node.change(function() {
          if (!$node.prop('checked')) {
            return;
          }
          return self.model.set(bindData.key, $node.val(), {
            direct: true
          });
        });
      } else if ($node.is('input:text, textarea, input[type="search"]')) {
        self.bind('_change:' + bindData.key, function() {
          return $node.val(self.model.get(bindData.key));
        });
        $node.keyup(function() {
          setTimeout(function() {
            return self.model.set(bindData.key, $node.val(), {
              direct: true
            });
          }, 50);
        });
      } else {
        self.bind('_change:' + bindData.key, (function(_this) {
          return function() {
            var key;
            key = self.model.get(bindData.key);
            if (key || key === 0) {
              $node.text(self.model.get(bindData.key).toString());
            } else {
              $node.text('');
            }
          };
        })(this));
      }
    }
    bindAttributesOneWay();
    bindData.attr.forEach(function(pair, index) {
      if (pair.attr === 'keyup') {
        $node.keyup(function() {
          setTimeout((function() {
            self.model.set(pair.attrVar, $node.val());
          }), 50);
        });
        self.bind('_change:' + pair.attrVar, function() {
          $node.val(self.model.get(pair.attrVar));
        });
      } else if (pair.attr === 'visible') {
        self.bind('_change:' + pair.attrVar, function() {
          if (self.model.get(pair.attrVar)) {
            $node.show();
          } else {
            $node.hide();
          }
        });
      } else {

      }
    });
    self.$node[bindData.key] = $node;
    self.key[$node] = bindData.key;
    if (required) {
      self.required[bindData.key] = required;
    }
  });
  return this;
};


}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],15:[function(require,module,exports){
(function (global){

/*---------------------------------------------
 *
 * View API
 *
 * view.format
 * view.style
 * view.$
 * render
 * bindings
 * sync
 * stylize
 * $bound
 *
 */
var $, ROOT_SELECTOR, viewBind;

$ = (typeof window !== "undefined" ? window.jQuery : typeof global !== "undefined" ? global.jQuery : null);

viewBind = require('./view-bind');

ROOT_SELECTOR = '&';

module.exports = {
  format: '<div/>',
  style: '',
  $: function(selector) {
    if (!selector || selector === ROOT_SELECTOR) {
      return this.view.$root;
    } else {
      return this.view.$root.find(selector);
    }
  },
  render: function() {
    if (this.view.format.length === 0) {
      throw new Error('afinity: empty format in view.render()');
    }
    if (this.view.$root instanceof jQuery && this._template) {

    } else if (this.view.$root.size() === 0) {
      this.view.$root = $(this.view.format);
    } else {
      this.view.$root.html($(this.view.format).html());
    }
    if (!(this.view.$root instanceof jQuery) && this.view.$root.size() === 0) {
      throw new Error('afinity: could not generate html from format');
    }
    this.$view = this.view.$root;
    this.$ = this.view.$;
    return this;
  },
  bindings: viewBind,
  sync: function() {
    this.model.each((function(_this) {
      return function(key, val) {
        return _this.trigger('_change:' + key);
      };
    })(this));
    if (this.model.size() > 0) {
      this.trigger('_change');
    }
    return this;
  },
  stylize: function() {
    var ancestorId, ancestorWithStyle, objClass, regex, styleStr;
    if (this.view.style.length === 0 || this.view.$().size() === 0) {
      return;
    }
    regex = new RegExp(ROOT_SELECTOR, 'g');
    if (this.view.hasOwnProperty('style')) {
      objClass = 'afinity_' + this._id;
      styleStr = this.view.style.replace(regex, '.' + objClass);
      $('head', window.document).append("<style id=\"" + objClass + "\" type=\"text/css\">" + styleStr + "</style>");
      this.view.$().addClass(objClass);
    } else {
      ancestorWithStyle = function(object) {
        while (object !== null) {
          object = Object.getPrototypeOf(object);
          if (object.view.hasOwnProperty('style')) {
            return object._id;
          }
        }
        return void 0;
      };
      ancestorId = ancestorWithStyle(this);
      objClass = 'afinity_' + ancestorId;
      this.view.$().addClass(objClass);
    }
    return this;
  },
  $bound: function(key) {
    if (this.$node[key] != null) {
      return this.$node[key];
    } else {
      return false;
    }
  }
};


}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"./view-bind":14}],16:[function(require,module,exports){
(function (global){

/*---------------------------------------------
 *
 * _container
 *
 * API and related auxiliary functions for storing child Afinity objects.
 * Not all methods are exposed. See 'shortcuts' below for exposed methods.
 *
 */
var $, util,
  slice = [].slice;

$ = (typeof window !== "undefined" ? window.jQuery : typeof global !== "undefined" ? global.jQuery : null);

util = require('../util');

module.exports = {
  _insertObject: function(obj, selector, method, args) {
    var arg, i, len, tmp;
    if (typeof obj === 'string') {
      tmp = obj;
      obj = selector;
      selector = tmp;
    } else if (typeof obj === 'object' && typeof selector === 'object') {
      if (args == null) {
        args = [];
      }
      args.unshift(selector);
      selector = '';
    }
    if (!util.isAfinity(obj)) {
      throw new Error('afinity.js: append argument is not an afinity object');
    }
    this._container.children[obj._id] = obj;
    this.trigger(method, [obj, selector]);
    obj._parent = this;
    obj.bind('destroy', (function(_this) {
      return function(id) {
        _this._container.remove(id);
      };
    })(this));
    obj.trigger('parent:' + method);
    if (args != null) {
      for (i = 0, len = args.length; i < len; i++) {
        arg = args[i];
        this[method](arg, selector);
      }
    }
    return this;
  },
  append: function() {
    var args, obj, selector;
    obj = arguments[0], selector = arguments[1], args = 3 <= arguments.length ? slice.call(arguments, 2) : [];
    return this._container._insertObject.call(this, obj, selector, 'append', args);
  },
  prepend: function() {
    var args, obj, selector;
    obj = arguments[0], selector = arguments[1], args = 3 <= arguments.length ? slice.call(arguments, 2) : [];
    return this._container._insertObject.call(this, obj, selector, 'prepend');
  },
  after: function() {
    var args, obj, selector;
    obj = arguments[0], selector = arguments[1], args = 3 <= arguments.length ? slice.call(arguments, 2) : [];
    return this._container._insertObject.call(this, obj, selector, 'after');
  },
  before: function() {
    var args, obj, selector;
    obj = arguments[0], selector = arguments[1], args = 3 <= arguments.length ? slice.call(arguments, 2) : [];
    return this._container._insertObject.call(this, obj, selector, 'before');
  },
  remove: function(id) {
    delete this._container.children[id];
    this.trigger('remove', id);
    return this;
  },
  each: function(fn) {
    $.each(this._container.children, fn);
    return this;
  },
  empty: function() {
    this.each(function() {
      return this.destroy();
    });
    return this;
  },
  size: function() {
    return util.size(this._container.children);
  }
};


}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"../util":22}],17:[function(require,module,exports){
(function (global){

/*
 *
 * _events API and auxiliary functions for handling events
 *
 */
var $, ROOT_SELECTOR, parseEventStr, reverseEvents,
  slice = [].slice;

$ = (typeof window !== "undefined" ? window.jQuery : typeof global !== "undefined" ? global.jQuery : null);

ROOT_SELECTOR = '&';


/*
 *
 * Parse event string
 *
 * 'event'          : custom event
 * 'event selector' : DOM event using 'selector'
 *
 * Returns { type:'event' [, selector:'selector'] }
 *
 */

parseEventStr = function(eventStr) {
  var eventObj, spacePos;
  eventObj = {
    type: eventStr
  };
  spacePos = eventStr.search(/\s/);
  if (spacePos > -1) {
    eventObj.type = eventStr.substr(0, spacePos);
    eventObj.selector = eventStr.substr(spacePos + 1);
  } else if (eventStr === 'click' || eventStr === 'submit' || eventStr === 'keyup' || eventStr === 'keydown') {
    eventObj.type = eventStr;
    eventObj.selector = ROOT_SELECTOR;
  }
  return eventObj;
};

reverseEvents = function(obj, eventType) {
  var e, events, reversedEvents;
  events = $(obj).data('events');
  if (events !== void 0 && events[eventType] !== void 0) {
    reversedEvents = [];
    for (e in events[eventType]) {
      if (!events[eventType].hasOwnProperty(e)) {
        continue;
      }
      reversedEvents.unshift(events[eventType][e]);
    }
    events[eventType] = reversedEvents;
  }
};

module.exports = {
  bind: function(eventStr, fn) {
    var eventObj, fnx;
    eventObj = parseEventStr(eventStr);
    fnx = function(event) {
      fn(event);
      return false;
    };
    if (eventObj.selector) {
      if (eventObj.type === 'click' || eventObj.type === 'submit') {
        if (eventObj.selector === ROOT_SELECTOR) {
          this.view.$().on(eventObj.type, fnx);
        } else {
          this.view.$().on(eventObj.type, eventObj.selector, fnx);
        }
      } else {
        if (eventObj.selector === ROOT_SELECTOR) {
          this.view.$().on(eventObj.type, fn);
        } else {
          this.view.$().on(eventObj.type, eventObj.selector, fn);
        }
      }
    } else {
      $(this._events.data).on(eventObj.type, function() {
        var data, ev;
        ev = arguments[0], data = 2 <= arguments.length ? slice.call(arguments, 1) : [];
        return fn.apply(null, data);
      });
    }
    return this;
  },
  trigger: function(eventStr, params, internal) {
    var eventObj, prefix;
    if (internal == null) {
      internal = true;
    }
    eventObj = parseEventStr(eventStr);
    if (eventObj.selector) {
      if (eventObj.selector === ROOT_SELECTOR) {
        this.view.$().trigger(eventObj.type, params);
      } else {
        this.view.$().find(eventObj.selector).trigger(eventObj.type, params);
      }
    } else {
      if (internal) {
        $(this._events.data).trigger('_' + eventObj.type, params);
      }
      reverseEvents(this._events.data, 'pre:' + eventObj.type);
      $(this._events.data).trigger('pre:' + eventObj.type, params);
      reverseEvents(this._events.data, 'pre:' + eventObj.type);
      $(this._events.data).trigger(eventObj.type, params);
      if (this.parent()) {
        if (eventObj.type.match(/^child:/)) {
          prefix = '';
        } else {
          prefix = 'child:';
        }
        this.parent().trigger(prefix + eventObj.type, params);
      }
      $(this._events.data).trigger('post:' + eventObj.type, params);
    }
    return this;
  }
};


}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],18:[function(require,module,exports){
(function (global){

/*---------------------------------------------
 *
 * Extended shortcuts for afinity object
 *
 * get, set, invalid, replace, child, children, load, create, register
 *
 */
var $;

$ = (typeof window !== "undefined" ? window.jQuery : typeof global !== "undefined" ? global.jQuery : null);

module.exports = {
  get: function(arg) {
    return this.model.get(arg);
  },
  set: function(arg, params, third) {
    return this.model.set(arg, params, third);
  },
  silentSet: function(arg) {
    return this.model.set(arg, {
      silent: true
    });
  },
  reset: function(arg) {
    return this.model.reset(arg);
  },
  invalid: function() {
    return this.model.invalid();
  },
  child: function(n) {
    var i, j;
    i = 0;
    n = n || 0;
    for (j in this._container.children) {
      if (this._container.children.hasOwnProperty(j)) {
        if (i === n) {
          return this._container.children[j];
        } else if (i > n) {
          return false;
        }
        i++;
      }
    }
    return false;
  },
  children: function() {
    return this._container.children;
  },
  replace: function(obj, selector) {
    var tmp;
    if (typeof obj === 'string' && typeof selector === 'object') {
      tmp = obj;
      obj = selector;
      selector = tmp;
    }
    if (typeof selector === 'string') {
      this.view.$(selector).html('');
    }
    this.empty()._container.append.apply(this, arguments);
    return this;
  },
  load: function(proto, models, selector) {
    var i, maxChildren, maxModels, tmp;
    if (typeof proto === 'string' && typeof selector === 'object') {
      tmp = $.extend({}, models);
      models = selector;
      selector = proto;
      proto = tmp;
    }
    maxModels = models.length;
    maxChildren = this.size();
    if (!$.isArray(models)) {
      models = [models];
    }
    $.each(models, (function(_this) {
      return function(index, model) {
        if (_this.child(index)) {
          _this.child(index).model.set(model);
        } else {
          _this.append(afinity(proto, model), selector);
        }
      };
    })(this));
    if (maxChildren > maxModels) {
      i = maxModels;
      while (i < maxChildren) {
        this.child(maxModels).destroy();
        i++;
      }
    }
    return this;
  }
};


}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],19:[function(require,module,exports){
(function (global){

/*---------------------------------------------
 *
 * Form helpers
 *
 */
var $;

$ = (typeof window !== "undefined" ? window.jQuery : typeof global !== "undefined" ? global.jQuery : null);

require('../util/jquery.util');

module.exports = {
  form: {
    clear: function() {
      var checkedRadio;
      checkedRadio = [];
      this.$view.find(':input, textarea').not(':button, :submit, :reset, :hidden').removeAttr('checked').removeAttr('selected').not(':checkbox, :radio, select').val('');
      this.$view.find(':radio').each((function(_this) {
        return function(i, el) {
          var $el, name, val;
          $el = $(el);
          name = $el.attr('name');
          val = $el.val();
          if (checkedRadio.indexOf(name) < 0) {
            checkedRadio.push(name);
            $el.attr('checked', 'checked');
            _this.set(name, val);
          }
        };
      })(this));
      return this.$view;
    },
    invalid: function() {
      return this.model.invalid();
    },
    toObject: function() {
      return this.$view.serializeObject();
    },
    toJSON: function() {
      var obj;
      obj = this.$view.serializeObject();
      return JSON.stringify(obj);
    }
  }
};


}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"../util/jquery.util":23}],20:[function(require,module,exports){
(function (global){

/*---------------------------------------------
 *
 * Construct default object prototype
 *
 */
var $, defaultPrototype, extend, form, shortcuts;

$ = (typeof window !== "undefined" ? window.jQuery : typeof global !== "undefined" ? global.jQuery : null);

defaultPrototype = {
  _afinity: true,
  _container: require('./container'),
  _events: require('./events'),
  $node: {},
  key: {},
  required: {},
  model: require('../mvc/model'),
  view: require('../mvc/view'),
  controller: require('../mvc/controller')
};

shortcuts = require('./shortcuts');

extend = require('./extend');

form = require('./form');

module.exports = $.extend(defaultPrototype, shortcuts, extend, form);


}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"../mvc/controller":9,"../mvc/model":13,"../mvc/view":15,"./container":16,"./events":17,"./extend":18,"./form":19,"./shortcuts":21}],21:[function(require,module,exports){

/*---------------------------------------------
 *
 * Object shortcuts
 *
 */
module.exports = {
  destroy: function() {
    this.trigger('destroy', this._id);
  },
  parent: function() {
    return this._parent;
  },
  append: function() {
    this._container.append.apply(this, arguments);
    return this;
  },
  prepend: function() {
    this._container.prepend.apply(this, arguments);
    return this;
  },
  after: function() {
    this._container.after.apply(this, arguments);
    return this;
  },
  before: function() {
    this._container.before.apply(this, arguments);
    return this;
  },
  remove: function() {
    this._container.remove.apply(this, arguments);
    return this;
  },
  size: function() {
    return this._container.size.apply(this, arguments);
  },
  each: function() {
    return this._container.each.apply(this, arguments);
  },
  empty: function() {
    return this._container.empty.apply(this, arguments);
  },
  bind: function() {
    this._events.bind.apply(this, arguments);
    return this;
  },
  on: function() {
    this._events.bind.apply(this, arguments);
    return this;
  },
  trigger: function() {
    this._events.trigger.apply(this, arguments);
    return this;
  }
};


},{}],22:[function(require,module,exports){
(function (global){

/*
 *
 * util.*
 *
 * isAfinity
 * size
 * proxyAll
 * extendController
 *
 */
var $, util;

$ = (typeof window !== "undefined" ? window.jQuery : typeof global !== "undefined" ? global.jQuery : null);

util = {};

util.isAfinity = function(obj) {
  if ((obj == null) || typeof obj !== 'object') {
    return false;
  } else {
    return obj._afinity === true;
  }
};

util.size = function(obj) {
  var key, size;
  size = 0;
  for (key in obj) {
    size++;
  }
  return size;
};

util.proxyAll = function(obj, dest) {
  var attr1, attr2, proxied, proxied2;
  if (!obj || !dest) {
    throw new Error('afinity.js: util.proxyAll needs two arguments');
  }
  for (attr1 in obj) {
    proxied = obj[attr1];
    if (typeof obj[attr1] === 'function') {
      proxied = obj[attr1]._noProxy ? obj[attr1] : $.proxy(obj[attr1]._preProxy || obj[attr1], dest);
      proxied._preProxy = obj[attr1]._noProxy ? void 0 : obj[attr1]._preProxy || obj[attr1];
      obj[attr1] = proxied;
    } else if (typeof obj[attr1] === 'object') {
      if (obj[attr1] instanceof jQuery || util.isAfinity(obj[attr1])) {
        continue;
      }
      for (attr2 in obj[attr1]) {
        proxied2 = obj[attr1][attr2];
        if (typeof obj[attr1][attr2] === 'function') {
          proxied2 = obj[attr1][attr2]._noProxy ? obj[attr1][attr2] : $.proxy(obj[attr1][attr2]._preProxy || obj[attr1][attr2], dest);
          proxied2._preProxy = obj[attr1][attr2]._noProxy ? void 0 : obj[attr1][attr2]._preProxy || obj[attr1][attr2];
          proxied[attr2] = proxied2;
        }
      }
      obj[attr1] = proxied;
    }
  }
};

util.extendController = function(object) {
  var controllerName, fn;
  fn = function() {
    var currentHandler, eventName, extend, matches, newHandler, previousHandler;
    if (typeof object.controller[controllerName] === 'function') {
      matches = controllerName.match(/^(\~)*(.+)/);
      extend = matches[1];
      eventName = matches[2];
      if (!extend) {
        return;
      }
      previousHandler = object.controller[eventName] ? object.controller[eventName]._preProxy || object.controller[eventName] : void 0;
      currentHandler = object.controller[controllerName];
      newHandler = function() {
        if (previousHandler) {
          previousHandler.apply(this, arguments);
        }
        if (currentHandler) {
          currentHandler.apply(this, arguments);
        }
      };
      object.controller[eventName] = newHandler;
      delete object.controller[controllerName];
    }
  };
  for (controllerName in object.controller) {
    fn();
  }
};

module.exports = util;


}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],23:[function(require,module,exports){
(function (global){

/*
 *
 * jQuery utility functions
 *
 * outerHTML, isEmpty, isEmail, serializeObject
 *
 * TODO: Make these internal - don't attach on $
 *
 */
var $;

$ = (typeof window !== "undefined" ? window.jQuery : typeof global !== "undefined" ? global.jQuery : null);

$.fn.outerHTML = function(s) {
  var doc;
  if (s) {
    return this.before(s).remove();
  } else {
    doc = this[0] ? this[0].ownerDocument : document;
    return jQuery('<div>', doc).append(this.eq(0).clone()).html();
  }
};

$.isEmpty = function(mixed_var) {
  var emptyValues, i, key, len, undef;
  undef = void 0;
  key = void 0;
  i = void 0;
  len = void 0;
  emptyValues = [undef, null, ''];
  i = 0;
  len = emptyValues.length;
  while (i < len) {
    if (mixed_var === emptyValues[i]) {
      return true;
    }
    i++;
  }
  if (typeof mixed_var === 'object') {
    for (key in mixed_var) {
      if (mixed_var.hasOwnProperty(key)) {
        return false;
      }
    }
    return true;
  }
  return false;
};

$.isEmail = function(email) {
  var regex;
  if ($.isEmpty(email)) {
    return false;
  }
  regex = /^([a-zA-Z0-9_.+-])+\@(([a-zA-Z0-9-])+\.)+([a-zA-Z0-9]{2,4})+$/;
  return regex.test(email);
};

$.fn.serializeObject = function() {
  var active, data;
  data = {};
  active = {
    datepicker: typeof $.pikaday !== 'undefined',
    timepicker: typeof $.timepicker !== 'undefined'
  };
  this.find('input, select, textarea').each(function() {
    var $el, name, type, val;
    $el = $(this);
    type = $el.attr('type');
    name = $el.attr('name');
    val = $el.val();
    if (name != null) {
      if (type === 'checkbox') {
        if (!$el.prop('checked')) {
          val = '';
        }
        if (typeof data[name] === 'undefined') {
          data[name] = val;
        } else {
          if (typeof data[name] === 'string') {
            data[name] = [data[name]];
          }
          data[name].push(val);
        }
      } else {
        if (active.datepicker && $el.hasClass('datepicker')) {
          val = $el.pikaday('getDate');
        } else if (active.timepicker && $el.hasClass('timepicker')) {
          val = $el.next().val();
        }
        data[name] = val;
      }
    }
  });
  return data;
};


}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}]},{},[8])(8)
});


//# sourceMappingURL=data:application/json;base64,